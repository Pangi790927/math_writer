#define IMGUI_DEFINE_MATH_OPERATORS

#include "imgui_helpers.h"
#include "imgui_internal.h"

#include <memory>

#define NOVIZ true

#define KEY_TOGGLE(key)                                                                             \
[]{                                                                                                 \
    static bool key_state = false;                                                                  \
    static bool toggle_state = false;                                                               \
    if (key_state == false && ImGui::IsKeyPressed(key)) {                                           \
        key_state = true;                                                                           \
        toggle_state = !toggle_state;                                                               \
    }                                                                                               \
    else if (ImGui::IsKeyReleased(key)) {                                                           \
        key_state = false;                                                                          \
    }                                                                                               \
    return toggle_state;                                                                            \
}()

const char *codes[] = {
    "\x00","\x01","\x02","\x03","\x04","\x05","\x06","\x07","\x08","\x09","\x0A","\x0B","\x0C","\x0D","\x0E","\x0F",
    "\x10","\x11","\x12","\x13","\x14","\x15","\x16","\x17","\x18","\x19","\x1A","\x1B","\x1C","\x1D","\x1E","\x1F",
    "\x20","\x21","\x22","\x23","\x24","\x25","\x26","\x27","\x28","\x29","\x2A","\x2B","\x2C","\x2D","\x2E","\x2F",
    "\x30","\x31","\x32","\x33","\x34","\x35","\x36","\x37","\x38","\x39","\x3A","\x3B","\x3C","\x3D","\x3E","\x3F",
    "\x40","\x41","\x42","\x43","\x44","\x45","\x46","\x47","\x48","\x49","\x4A","\x4B","\x4C","\x4D","\x4E","\x4F",
    "\x50","\x51","\x52","\x53","\x54","\x55","\x56","\x57","\x58","\x59","\x5A","\x5B","\x5C","\x5D","\x5E","\x5F",
    "\x60","\x61","\x62","\x63","\x64","\x65","\x66","\x67","\x68","\x69","\x6A","\x6B","\x6C","\x6D","\x6E","\x6F",
    "\x70","\x71","\x72","\x73","\x74","\x75","\x76","\x77","\x78","\x79","\x7A","\x7B","\x7C","\x7D","\x7E","\x7F",
    "\x80","\x81","\x82","\x83","\x84","\x85","\x86","\x87","\x88","\x89","\x8A","\x8B","\x8C","\x8D","\x8E","\x8F",
    "\x90","\x91","\x92","\x93","\x94","\x95","\x96","\x97","\x98","\x99","\x9A","\x9B","\x9C","\x9D","\x9E","\x9F",
    "\xA0","\xA1","\xA2","\xA3","\xA4","\xA5","\xA6","\xA7","\xA8","\xA9","\xAA","\xAB","\xAC","\xAD","\xAE","\xAF",
    "\xB0","\xB1","\xB2","\xB3","\xB4","\xB5","\xB6","\xB7","\xB8","\xB9","\xBA","\xBB","\xBC","\xBD","\xBE","\xBF",
    "\xC0","\xC1","\xC2","\xC3","\xC4","\xC5","\xC6","\xC7","\xC8","\xC9","\xCA","\xCB","\xCC","\xCD","\xCE","\xCF",
    "\xD0","\xD1","\xD2","\xD3","\xD4","\xD5","\xD6","\xD7","\xD8","\xD9","\xDA","\xDB","\xDC","\xDD","\xDE","\xDF",
    "\xE0","\xE1","\xE2","\xE3","\xE4","\xE5","\xE6","\xE7","\xE8","\xE9","\xEA","\xEB","\xEC","\xED","\xEE","\xEF",
    "\xF0","\xF1","\xF2","\xF3","\xF4","\xF5","\xF6","\xF7","\xF8","\xF9","\xFA","\xFB","\xFC","\xFD","\xFE","\xFF",
};

/*  I have 7 fonts, 3 with mathematics, 4 for words but in need of some signs(ex: '{', '}')
    I'm interested in the math parts, so the first thing should be to map the 3 fonts to some
    numbers and symbols to make it clear.
*/

struct math_symbol_t {
    int font;
    int code;
    char str[64];
};

ImFont* fonts[7];

math_symbol_t math_symbols[] = {
    { 0, 0xAE, "\\alpha" },
    { 0, 0xAF, "\\beta" },
    { 0, 0xB0, "\\gamma" },
    { 0, 0xB1, "\\delta" },
    { 0, 0xB2, "\\epsilon" },
    { 0, 0xB3, "\\zeta" },
    { 0, 0xB4, "\\eta" },
    { 0, 0xB5, "\\theta" },
    { 0, 0xB6, "\\iota" },
    { 0, 0xB7, "\\kappa" },
    { 0, 0xB8, "\\lambda" },
    { 0, 0xB9, "\\mu" },
    { 0, 0xBA, "\\nu" },
    { 0, 0xBB, "\\xi" },
    { 0, 0xBC, "\\pi" },
    { 0, 0xBD, "\\rho" },
    { 0, 0xBE, "\\sigma" },
    { 0, 0xBF, "\\tau" },
    { 0, 0xC0, "\\upsilon" },
    { 0, 0xC1, "\\phi" },
    { 0, 0xC2, "\\chi" },
    { 0, 0xC3, "\\psi" },
    { 0, 0x21, "\\omega" },

    { 0, 0xA1, "\\Gamma" },
    { 0, 0xA2, "\\Delta" },
    { 0, 0xA3, "\\Theta" },
    { 0, 0xA4, "\\Lambda" },
    { 0, 0xA5, "\\Xi" },
    { 0, 0xA6, "\\Pi" },
    { 0, 0xA7, "\\Sigma" },
    { 0, 0xA8, "\\Upsilon" },
    { 0, 0xA9, "\\Phi" },
    { 0, 0xAA, "\\Psi" },
    { 0, 0xAB, "\\Omega" },

    { 0, 0x40, "\\partial"}, /* derivative */

    /* Arrow parts */
    { 0, 0x28, "_arrow_left_part_up"},
    { 0, 0x29, "_arrow_left_part_down"},
    { 0, 0x2A, "_arrow_right_part_up"},
    { 0, 0x2B, "_arrow_right_part_down"},

    { 0, 0x3F, "_star_sym"},
    { 0, 0x7E, "_vector_hat"},

    { 0, '0', "0"},
    { 0, '1', "1"},
    { 0, '2', "2"},
    { 0, '3', "3"},
    { 0, '4', "4"},
    { 0, '5', "5"},
    { 0, '6', "6"},
    { 0, '7', "7"},
    { 0, '8', "8"},
    { 0, '9', "9"},

    { 0, 'a', "a"},
    { 0, 'b', "b"},
    { 0, 'c', "c"},
    { 0, 'd', "d"},
    { 0, 'e', "e"},
    { 0, 'f', "f"},
    { 0, 'g', "g"},
    { 0, 'h', "h"},
    { 0, 'i', "i"},
    { 0, 'j', "j"},
    { 0, 'k', "k"},
    { 0, 'l', "l"},
    { 0, 'm', "m"},
    { 0, 'n', "n"},
    { 0, 'o', "o"},
    { 0, 'p', "p"},
    { 0, 'q', "q"},
    { 0, 'r', "r"},
    { 0, 's', "s"},
    { 0, 't', "t"},
    { 0, 'u', "u"},
    { 0, 'v', "v"},
    { 0, 'w', "w"},
    { 0, 'x', "x"},
    { 0, 'y', "y"},
    { 0, 'z', "z"},

    { 0, 'A', "A"},
    { 0, 'B', "B"},
    { 0, 'C', "C"},
    { 0, 'D', "D"},
    { 0, 'E', "E"},
    { 0, 'F', "F"},
    { 0, 'G', "G"},
    { 0, 'H', "H"},
    { 0, 'I', "I"},
    { 0, 'J', "J"},
    { 0, 'K', "K"},
    { 0, 'L', "L"},
    { 0, 'M', "M"},
    { 0, 'N', "N"},
    { 0, 'O', "O"},
    { 0, 'P', "P"},
    { 0, 'Q', "Q"},
    { 0, 'R', "R"},
    { 0, 'S', "S"},
    { 0, 'T', "T"},
    { 0, 'U', "U"},
    { 0, 'V', "V"},
    { 0, 'W', "W"},
    { 0, 'X', "X"},
    { 0, 'Y', "Y"},
    { 0, 'Z', "Z"},

    /* TODO: font0: {0..9} {a..z} {A..Z} {.} {,} {<} {>} */
    /* TODO: font0: figure out what is with the '/' sign there */

    /* TODO: font1: {A..Z} */

    /* font1: A-Z -> strange letters */
    { 1, 'A', "A"},
    { 1, 'B', "B"},
    { 1, 'C', "C"},
    { 1, 'D', "D"},
    { 1, 'E', "E"},
    { 1, 'F', "F"},
    { 1, 'G', "G"},
    { 1, 'H', "H"},
    { 1, 'I', "I"},
    { 1, 'J', "J"},
    { 1, 'K', "K"},
    { 1, 'L', "L"},
    { 1, 'M', "M"},
    { 1, 'N', "N"},
    { 1, 'O', "O"},
    { 1, 'P', "P"},
    { 1, 'Q', "Q"},
    { 1, 'R', "R"},
    { 1, 'S', "S"},
    { 1, 'T', "T"},
    { 1, 'U', "U"},
    { 1, 'V', "V"},
    { 1, 'W', "W"},
    { 1, 'X', "X"},
    { 1, 'Y', "Y"},
    { 1, 'Z', "Z"},

    { 1, 0x21, "_arrow_right" },
    { 1, 0x22, "_arrow_up" },
    { 1, 0x23, "_arrow_down" },
    { 1, 0x24, "_arrow_left_right" },
    { 1, 0x25, "_arrow_right_corner_up" },
    { 1, 0x26, "_arrow_right_corner_down" },
    { 1, 0x27, "_aprox_eq" },
    { 1, 0x28, "_double_arrow_left" },
    { 1, 0x29, "_double_arrow_right" },
    { 1, 0x2A, "_double_arrow_up" },
    { 1, 0x2B, "_double_arrow_down" },
    { 1, 0x2C, "_double_arrow_left_right" },
    { 1, 0x2D, "_arrow_left_corner_up" },
    { 1, 0x2E, "_arrow_left_corner_down" },
    { 1, 0x2F, "\\propto" },
    { 1, 0x30, "this: ' " },
    { 1, 0x31, "infinity" },
    { 1, 0x32, "part of set" },
    { 1, 0x33, "part of set rev" },
    { 1, 0x34, "delta as operator" },
    { 1, 0x35, "reverse delta" },
    { 1, 0x36, "this: / " },
    { 1, 0x37, "????" },
    { 1, 0x38, "\\forall" },
    { 1, 0x39, "\\exists" },
    { 1, 0x3A, "negate" },
    { 1, 0x3B, "empty set" },
    { 1, 0x3C, "strange R" },
    { 1, 0x3D, "strange something" },
    { 1, 0x3E, "T" },
    { 1, 0x3F, "T reversed" },
    { 1, 0x40, "\\aleph" },
    { 1, 0x5B, "union" },
    { 1, 0x5C, "intersect" },
    { 1, 0x5D, "union +" },
    { 1, 0x5E, "and" },
    { 1, 0x5F, "or" },
    { 1, 0x60, "T to the left" },
    { 1, 0x61, "T to the right" },

    { 1, 0x66, "{" },
    { 1, 0x67, "}" },
    { 1, 0x71, "pi reversed" },
    { 1, 0x72, "laplacian" },

    { 1, 0xA1, "minus" },
    { 1, 0xA1, "dot - product" },
    { 1, 0xA1, "times" },
    { 1, 0xA1, "star" },
    { 1, 0xA1, "division" },
    { 1, 0xA1, "romb" },
    { 1, 0xA1, "+/-" },
    { 1, 0xA1, "-/+" },
    { 1, 0xA1, "+ in circle" },
    { 1, 0xA1, "- in circle" },

    { 1, 0xAE, "/ in circle" },
    { 1, 0xAE, "dot in circle" },
    { 1, 0xAE, "empty circle" },
    { 1, 0xB4, "congruence" },
    { 1, 0xB5, "included or equal" },
    { 1, 0xB5, "includes or equal" },
    { 1, 0xB5, "less than" },
    { 1, 0xB5, "greater than" },
    { 1, 0xB5, "strange less than" },
    { 1, 0xB5, "strange greater than" },
    { 1, 0xB5, "aprox" },
    { 1, 0xB5, "double aprox" },
    { 1, 0xB5, "includes" },
    { 1, 0xB5, "included" },
    { 1, 0xB5, "much lesser" },
    { 1, 0xB5, "much greater" },
    { 1, 0xB5, "strange less" },
    { 1, 0xB5, "strange greater" },
    { 1, 0xB5, "arrow left" },

};

namespace ImMath {


struct math_node_t;
using math_node_p = std::shared_ptr<math_node_t>;

struct math_node_t {
    std::vector<math_node_p> childs;
};

struct MathLine {
    virtual ~MathLine() {}
};

struct MathEquation : public MathLine {
    math_node_p root;
};

struct MathDesc : public MathLine {
    std::string text;
};

/* This is the document object, holding:
    - text descriptions (Those are texts around the formulas)
    - math formulas (Those are the important part)
    - math definitions (what objects are, what operations are permisible, etc) */
struct MathDocument {
    std::vector<std::shared_ptr<MathLine>> lines;
};

void draw_math() {
    for (int k = 0; k < 7; k++) {
        auto font = fonts[k];
        ImGui::PushFont(font);

        ImDrawList* draw_list = ImGui::GetWindowDrawList();

        static float sz = 36.0f;
        static float thickness = 1.0f;

        ImVec2 p1 = ImGui::GetCursorScreenPos();
        ImVec2 p2 = ImGui::GetMousePos();
        float th = thickness;

        ImVec4 col = ImVec4(1.0f, 1.0f, 0.4f, 1.0f);
        ImU32 col32 = ImColor(col);
        draw_list->AddLine(ImVec2(0, 0), ImVec2(0, 0), col32, th);

        float off_y = 0;
        float max_off_x = 0;
        p1 = ImGui::GetCursorScreenPos();
        for (int i = 0; i < 16; i++) {
            float off_x = 0;
            bool at_least_one = false;
            for (int j = 0; j < 16; j++) {
                int code = i*16 + j;

                float r = 1.;
                float g = 1.;
                float b = 1.;

                auto glyph = font->FindGlyphNoFallback(code);
                if (!glyph)
                    continue;

                at_least_one = true;
                if (!glyph->Visible)
                    r = 0;

                ImVec2 box_origin = ImVec2(p1.x + off_x, p1.y + off_y);

                ImVec2 box_bot = ImVec2(p1.x + glyph->X0 + off_x, p1.y + off_y + glyph->Y0);
                ImVec2 box_top = ImVec2(p1.x + glyph->X1 + off_x, p1.y + off_y + glyph->Y1);
                off_x += glyph->AdvanceX;


                /* OBS: RenderChar is the only method that works, for unknown reasons, maybe I can
                fix it? */
                font->RenderChar(draw_list, font->FontSize, box_origin, 0xff00ffff, code);

                // draw_list->AddText(font, font->FontSize, box_origin, 0xffff00ff, codes[code], NULL);

                col = ImVec4(r, g, b, 1.0f);
                ImU32 col32 = ImColor(col);
                if (KEY_TOGGLE(ImGuiKey_R)) {
                    draw_list->AddLine(ImVec2(box_bot.x, box_bot.y), ImVec2(box_top.x, box_bot.y), col32, th);
                    draw_list->AddLine(ImVec2(box_top.x, box_bot.y), ImVec2(box_top.x, box_top.y), col32, th);
                    draw_list->AddLine(ImVec2(box_top.x, box_top.y), ImVec2(box_bot.x, box_top.y), col32, th);
                    draw_list->AddLine(ImVec2(box_bot.x, box_top.y), ImVec2(box_bot.x, box_bot.y), col32, th);
                }

                // draw_list->AddLine(p1, ImVec2(p1.x, p1.y + 100), 0xffffff00, th);
                // draw_list->AddLine(p1, p2, col32, th);

                // draw_list->AddLine(ImVec2(p1.x - 100, p1.y), ImVec2(p1.x, p1.y), 0xffff0000);

                // draw_list->AddLine(ImVec2(p1.x - 10, p1.y + font->Ascent),
                //         ImVec2(p1.x + 10, p1.y + font->Ascent), 0xff00ff00, th);

                // draw_list->AddLine(ImVec2(p1.x + 10, p1.y + font->Ascent - font->Descent),
                //         ImVec2(p1.x - 10, p1.y + font->Ascent - font->Descent), 0xff0000ff, th);

            }
            if (at_least_one) {
                off_y += -font->Descent + font->Ascent;
            }
            max_off_x = std::max(max_off_x, off_x);
        }
        ImGui::Dummy(ImVec2(max_off_x, off_y));

        ImGui::PopFont();
    }
}

/* TODO: Look at implot on how to build a minimal box for our purpose, and ignore the special cases
built into the imgui multiline input because it has too many things I don't want to read about... */
bool MathBox(const char* label, ImVec2 size_arg, MathDocument *doc) {
    using namespace ImGui;

    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    ImGuiIO& io = g.IO;
    const ImGuiStyle& style = g.Style;

    BeginGroup();
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImVec2 frame_size = CalcItemSize(size_arg, CalcItemWidth(), (g.FontSize * 8.0f) + style.FramePadding.y * 2.0f); // Arbitrary default of 8 lines high for multi-line
    const ImVec2 total_size = ImVec2(frame_size.x + (label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f), frame_size.y);

    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    const ImRect total_bb(frame_bb.Min, frame_bb.Min + total_size);

    ImGuiWindow* draw_window = window;
    ImVec2 inner_size = frame_size;
    ImGuiLastItemData item_data_backup;

    ImVec2 backup_pos = window->DC.CursorPos;
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb, ImGuiItemFlags_Inputable))
    {
        EndGroup();
        return false;
    }
    item_data_backup = g.LastItemData;
    window->DC.CursorPos = backup_pos;

    // We reproduce the contents of BeginChildFrame() in order to provide 'label' so our window internal data are easier to read/debug.
    PushStyleColor(ImGuiCol_ChildBg, style.Colors[ImGuiCol_FrameBg]);
    PushStyleVar(ImGuiStyleVar_ChildRounding, style.FrameRounding);
    PushStyleVar(ImGuiStyleVar_ChildBorderSize, style.FrameBorderSize);
    PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0, 0)); // Ensure no clip rect so mouse hover can reach FramePadding edges
    bool child_visible = BeginChildEx(label, id, frame_bb.GetSize(), true, ImGuiWindowFlags_NoMove);
    // g.NavActivateId = backup_activate_id;
    PopStyleVar(3);
    PopStyleColor();
    if (!child_visible)
    {
        EndChild();
        EndGroup();
        return false;
    }
    draw_window = g.CurrentWindow; // Child window
    draw_window->DC.NavLayersActiveMaskNext |= (1 << draw_window->DC.NavLayerCurrent); // This is to ensure that EndChild() will display a navigation highlight so we can "enter" into it.
    draw_window->DC.CursorPos += style.FramePadding;
    inner_size.x -= draw_window->ScrollbarSizes.x;

    const bool hovered = ItemHoverable(frame_bb, id, g.LastItemData.InFlags);
    if (hovered) {
        /* This transforms the cursor in the text input stuff when covered */
        g.MouseCursor = ImGuiMouseCursor_TextInput;
    }

    const bool  mouse_lclick = hovered && io.MouseClicked[0];
    const bool  mouse_rclick = hovered && io.MouseClicked[1];
    const bool  mouse_mclick = hovered && io.MouseClicked[2];
    const float mouse_x = io.MousePos.x; // - frame_bb.Min.x - style.FramePadding.x;
    const float mouse_y = io.MousePos.y - draw_window->DC.CursorPos.y;

    if (hovered && io.MouseClickedCount[0] >= 2 && !io.KeyShift) {
        /* ... */
        /* TODO: maybe use multiple clicked count */
    }

    if (io.InputQueueCharacters.Size > 0)
    {
        for (int n = 0; n < io.InputQueueCharacters.Size; n++)
        {
            unsigned int c = (unsigned int)io.InputQueueCharacters[n];
            /* here we have a printable character comming from the keyboard. We don't have ctrl
            keys here(arrows, tab, shift, ctrl, alt). */
        }

        // Consume characters
        io.InputQueueCharacters.resize(0);
    }

    if (g.ActiveId == id)
    {
        DBG("...");
        // Declare some inputs, the other are registered and polled via Shortcut() routing system.
        if (mouse_lclick) {
            SetKeyOwner(ImGuiKey_MouseLeft, id);
            SetKeyOwner(ImGuiKey_MouseRight, id);
        }
        SetKeyOwner(ImGuiKey_Enter, id);
        SetKeyOwner(ImGuiKey_KeypadEnter, id);
        SetKeyOwner(ImGuiKey_Home, id);
        SetKeyOwner(ImGuiKey_End, id);
        SetKeyOwner(ImGuiKey_PageUp, id);
        SetKeyOwner(ImGuiKey_PageDown, id);
    }

    /* Those Shorcut stuff doesn't work, not know why */
    const ImGuiInputFlags f_repeat = ImGuiInputFlags_Repeat;
    const bool is_cut   = Shortcut(ImGuiMod_Shortcut | ImGuiKey_X, id, f_repeat);
    const bool is_copy  = Shortcut(ImGuiMod_Shortcut | ImGuiKey_C, id /* y no repeat? */);
    const bool is_paste = Shortcut(ImGuiMod_Shortcut | ImGuiKey_V, id, f_repeat);
    const bool is_undo  = Shortcut(ImGuiMod_Shortcut | ImGuiKey_Z, id, f_repeat);
    const bool is_redo  = Shortcut(ImGuiMod_Shortcut | ImGuiKey_Y, id, f_repeat);
    const bool is_select_all = Shortcut(ImGuiMod_Shortcut | ImGuiKey_A, id);

    // We allow validate/cancel with Nav source (gamepad) to makes it easier to undo an accidental NavInput press with no keyboard wired, but otherwise it isn't very useful.
    const bool is_enter_pressed = IsKeyPressed(ImGuiKey_Enter, true) || IsKeyPressed(ImGuiKey_KeypadEnter, true);
    const bool is_cancel = Shortcut(ImGuiKey_Escape, id, f_repeat);

    // FIXME: Should use more Shortcut() and reduce IsKeyPressed()+SetKeyOwner(), but requires modifiers combination to be taken account of.
    const bool is_left_arrow = IsKeyPressed(ImGuiKey_LeftArrow);
    const bool is_right_arrow = IsKeyPressed(ImGuiKey_RightArrow);
    const bool is_up_arrow = IsKeyPressed(ImGuiKey_UpArrow);
    const bool is_down_arrow = IsKeyPressed(ImGuiKey_DownArrow);
    const bool is_page_down = IsKeyPressed(ImGuiKey_PageDown);
    const bool is_page_up = IsKeyPressed(ImGuiKey_PageUp);
    const bool is_home = IsKeyPressed(ImGuiKey_Home);
    const bool is_delete = IsKeyPressed(ImGuiKey_Delete);
    const bool is_backspace = IsKeyPressed(ImGuiKey_Backspace);

    ImVec2 draw_pos = draw_window->DC.CursorPos;
    const ImVec4 clip_rect(frame_bb.Min.x, frame_bb.Min.y,
            frame_bb.Min.x + inner_size.x, frame_bb.Min.y + inner_size.y); // Not using frame_bb.Max because we have adjusted size

    static float cursor_anim = 0.3f;
    cursor_anim += io.DeltaTime;
    bool cursor_is_visible = (!g.IO.ConfigInputTextCursorBlink) || (cursor_anim <= 0.0f) || ImFmod(cursor_anim, 1.20f) <= 0.80f;
    ImVec2 cursor_screen_pos = ImTrunc(draw_pos + ImVec2(100, 100));
    ImRect cursor_screen_rect(cursor_screen_pos.x, cursor_screen_pos.y - g.FontSize + 0.5f,
            cursor_screen_pos.x + 1.0f, cursor_screen_pos.y - 1.5f);

    if (cursor_is_visible && cursor_screen_rect.Overlaps(clip_rect))
        draw_window->DrawList->AddLine(cursor_screen_rect.Min, cursor_screen_rect.GetBL(), GetColorU32(ImGuiCol_Text));

    ImDrawList* draw_list = ImGui::GetWindowDrawList();
    draw_list->AddLine(frame_bb.Min, ImVec2(mouse_x, mouse_y), 0xffffff00, 1.);

    draw_math();

    EndChild();
    EndGroup();
    return true;
}

}


int main(int argc, char const *argv[]) {
    imgui_init();
    ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

    float size_pixels = 72;
    ImGuiIO& io = ImGui::GetIO();
    ImFont* font_default = io.Fonts->AddFontDefault();
    
    ImFontConfig config;
    config.MergeMode = true;

    /* Font - Roman
        * Has some math operators/Symbols
        * Usefull for description parts of the app
    */
    ImFont* font1 = io.Fonts->AddFontFromFileTTF("fonts/cmr10.ttf" , size_pixels);

    /* Font - Bold Extended
        * Has some math operators/Symbols
        * Usefull for description parts of the app
    */
    ImFont* font2 = io.Fonts->AddFontFromFileTTF("fonts/cmbx10.ttf", size_pixels);

    /* Font - Text Italic
        * Has some math operators/Symbols
        * Usefull for description parts of the app
    */
    ImFont* font3 = io.Fonts->AddFontFromFileTTF("fonts/cmti10.ttf", size_pixels);

    /* Font - Typewriter Type
        * Has some math operators/Symbols
        * Usefull for description parts of the app
        * Has constant spacing, can be used for code writing
    */
    ImFont* font4 = io.Fonts->AddFontFromFileTTF("fonts/cmtt10.ttf", size_pixels);
    
    /* Font - Math Italic
        * Used for formulas (the variable names)
        * Has more/all greek
        * has some operators
    */
    ImFont* font5 = io.Fonts->AddFontFromFileTTF("fonts/cmmi10.ttf", size_pixels);

    /* Font - Math Symbols
        * Used for formulas
        * A lot of signs
    */
    ImFont* font6 = io.Fonts->AddFontFromFileTTF("fonts/cmsy10.ttf", size_pixels);

    /* Font - Math Extension
        * Used for formulas
        * big operators
        * brackets
    */
    ImFont* font7 = io.Fonts->AddFontFromFileTTF("fonts/cmex10.ttf", size_pixels);

    fonts[0] = font1;
    fonts[1] = font2;
    fonts[2] = font3;
    fonts[3] = font4;
    fonts[4] = font5;
    fonts[5] = font6;
    fonts[6] = font7;

    while (!glfwWindowShouldClose(imgui_window)) {
        glfwPollEvents();
        if (glfwGetKey(imgui_window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
            glfwSetWindowShouldClose(imgui_window, GL_TRUE);
            continue ;
        }

        imgui_prepare_render();

        auto main_flags = 
                ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove;
        auto *io = &ImGui::GetIO();
        ImGui::SetNextWindowSize(ImVec2(io->DisplaySize.x, io->DisplaySize.y));
        ImGui::SetNextWindowPos(ImVec2(0, 0));
        ImGui::GetStyle().WindowRounding = 0.0f;

        ImGui::Begin("Data aquisition", NULL, main_flags);

        ImGui::Text("Press R to hide/unhide the boxes");

        static ImMath::MathDocument math_doc;
        ImMath::MathBox("math_doc", ImVec2(-1, -1), &math_doc);

        bool true_val = true;
        ImGui::ShowMetricsWindow(&true_val);

        ImGui::End();

        /* Add imgui stuff here */
        imgui_render(clear_color);
    }
    imgui_uninit();
    return 0;
}
